{"version":3,"sources":["../../src/client/ThreadMessageClient.tsx"],"sourcesContent":["\"use client\";\nimport {\n  resource,\n  tapMemo,\n  tapState,\n  tapInlineResource,\n} from \"@assistant-ui/tap\";\nimport { AttachmentClientApi } from \"./types/Attachment\";\nimport { MessageClientState, MessageClientApi } from \"./types/Message\";\nimport { MessagePartClientState, MessagePartClientApi } from \"./types/Part\";\nimport { tapLookupResources } from \"./util-hooks/tapLookupResources\";\nimport { tapApi } from \"../utils/tap-store\";\nimport {\n  ThreadAssistantMessagePart,\n  ThreadUserMessagePart,\n  Attachment,\n  ThreadMessage,\n} from \"../types\";\nimport { NoOpComposerClient } from \"./NoOpComposerClient\";\n\nconst ThreadMessagePartClient = resource(\n  ({ part }: { part: ThreadAssistantMessagePart | ThreadUserMessagePart }) => {\n    const state = tapMemo<MessagePartClientState>(() => {\n      return {\n        ...part,\n        status: { type: \"complete\" },\n      };\n    }, [part]);\n\n    return tapApi<MessagePartClientApi>(\n      {\n        getState: () => state,\n        addToolResult: () => {\n          throw new Error(\"Not supported\");\n        },\n        resumeToolCall: () => {\n          throw new Error(\"Not supported\");\n        },\n      },\n      {\n        key:\n          state.type === \"tool-call\"\n            ? \"toolCallId-\" + state.toolCallId\n            : undefined,\n      },\n    );\n  },\n);\nconst ThreadMessageAttachmentClient = resource(\n  ({ attachment }: { attachment: Attachment }) => {\n    return tapApi<AttachmentClientApi>(\n      {\n        getState: () => attachment,\n        remove: () => {\n          throw new Error(\"Not supported\");\n        },\n      },\n      {\n        key: attachment.id,\n      },\n    );\n  },\n);\nexport type ThreadMessageClientProps = {\n  message: ThreadMessage;\n  isLast?: boolean;\n  branchNumber?: number;\n  branchCount?: number;\n};\nexport const ThreadMessageClient = resource(\n  ({\n    message,\n    isLast = true,\n    branchNumber = 1,\n    branchCount = 1,\n  }: ThreadMessageClientProps) => {\n    const [isCopiedState, setIsCopied] = tapState(false);\n    const [isHoveringState, setIsHovering] = tapState(false);\n\n    const parts = tapLookupResources(\n      message.content.map((_, idx) =>\n        ThreadMessagePartClient({ part: message.content[idx]! }, { key: idx }),\n      ),\n    );\n\n    const attachments = tapLookupResources(\n      message.attachments?.map((_, idx) =>\n        ThreadMessageAttachmentClient(\n          { attachment: message.attachments![idx]! },\n          { key: idx },\n        ),\n      ) ?? [],\n    );\n\n    const composerState = tapInlineResource(\n      NoOpComposerClient({ type: \"edit\" }),\n    );\n\n    const state = tapMemo<MessageClientState>(() => {\n      return {\n        ...message,\n        parts: parts.state,\n        composer: composerState.state,\n        parentId: null,\n        isLast,\n        branchNumber,\n        branchCount,\n        speech: undefined,\n        submittedFeedback: undefined,\n        isCopied: isCopiedState,\n        isHovering: isHoveringState,\n      };\n    }, [message, isCopiedState, isHoveringState, isLast]);\n\n    return tapApi<MessageClientApi>({\n      getState: () => state,\n      composer: composerState.api,\n      part: (selector) => {\n        if (\"index\" in selector) {\n          return parts.api({ index: selector.index });\n        } else {\n          return parts.api({ key: \"toolCallId-\" + selector.toolCallId });\n        }\n      },\n      attachment: (selector) => {\n        if (\"id\" in selector) {\n          return attachments.api({ key: selector.id });\n        } else {\n          return attachments.api(selector);\n        }\n      },\n      reload: () => {\n        throw new Error(\"Not supported in ThreadMessageProvider\");\n      },\n      speak: () => {\n        throw new Error(\"Not supported in ThreadMessageProvider\");\n      },\n      stopSpeaking: () => {\n        throw new Error(\"Not supported in ThreadMessageProvider\");\n      },\n      submitFeedback: () => {\n        throw new Error(\"Not supported in ThreadMessageProvider\");\n      },\n      switchToBranch: () => {\n        throw new Error(\"Not supported in ThreadMessageProvider\");\n      },\n      getCopyText: () => {\n        return message.content\n          .map((part) => {\n            if (\"text\" in part && typeof part.text === \"string\") {\n              return part.text;\n            }\n            return \"\";\n          })\n          .join(\"\\n\");\n      },\n      setIsCopied,\n      setIsHovering,\n    });\n  },\n);\n"],"mappings":"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","names":[]}