{"version":3,"sources":["../../../src/primitives/thread/ThreadSuggestion.tsx"],"sourcesContent":["\"use client\";\n\nimport {\n  ActionButtonElement,\n  ActionButtonProps,\n  createActionButton,\n} from \"../../utils/createActionButton\";\nimport { useCallback } from \"react\";\nimport { useAssistantState, useAssistantApi } from \"../../context\";\n\nconst useThreadSuggestion = ({\n  prompt,\n  send,\n  clearComposer = true,\n  autoSend,\n  method: _method,\n}: {\n  /** The suggestion prompt. */\n  prompt: string;\n\n  /**\n   * When true, automatically sends the message.\n   * When false, replaces or appends the composer text with the suggestion - depending on the value of `clearComposer`.\n   */\n  send?: boolean | undefined;\n\n  /**\n   * Whether to clear the composer after sending.\n   * When send is set to false, determines if composer text is replaced with suggestion (true, default),\n   * or if it's appended to the composer text (false).\n   *\n   * @default true\n   */\n  clearComposer?: boolean | undefined;\n\n  /** @deprecated Use `send` instead. */\n  autoSend?: boolean | undefined;\n\n  /** @deprecated Use `clearComposer` instead. */\n  method?: \"replace\";\n}) => {\n  const api = useAssistantApi();\n  const disabled = useAssistantState(({ thread }) => thread.isDisabled);\n\n  // ========== Deprecation Mapping ==========\n  const resolvedSend = send ?? autoSend ?? false;\n  // ==========================================\n\n  const callback = useCallback(() => {\n    const isRunning = api.thread().getState().isRunning;\n\n    if (resolvedSend && !isRunning) {\n      api.thread().append(prompt);\n      if (clearComposer) {\n        api.composer().setText(\"\");\n      }\n    } else {\n      if (clearComposer) {\n        api.composer().setText(prompt);\n      } else {\n        const currentText = api.composer().getState().text;\n        api\n          .composer()\n          .setText(currentText.trim() ? `${currentText} ${prompt}` : prompt);\n      }\n    }\n  }, [api, resolvedSend, clearComposer, prompt]);\n\n  if (disabled) return null;\n  return callback;\n};\n\nexport namespace ThreadPrimitiveSuggestion {\n  export type Element = ActionButtonElement;\n  export type Props = ActionButtonProps<typeof useThreadSuggestion>;\n}\n\nexport const ThreadPrimitiveSuggestion = createActionButton(\n  \"ThreadPrimitive.Suggestion\",\n  useThreadSuggestion,\n  [\"prompt\", \"send\", \"clearComposer\", \"autoSend\", \"method\"],\n);\n"],"mappings":";;;AAEA;AAAA,EAGE;AAAA,OACK;AACP,SAAS,mBAAmB;AAC5B,SAAS,mBAAmB,uBAAuB;AAEnD,IAAM,sBAAsB,CAAC;AAAA,EAC3B;AAAA,EACA;AAAA,EACA,gBAAgB;AAAA,EAChB;AAAA,EACA,QAAQ;AACV,MAwBM;AACJ,QAAM,MAAM,gBAAgB;AAC5B,QAAM,WAAW,kBAAkB,CAAC,EAAE,OAAO,MAAM,OAAO,UAAU;AAGpE,QAAM,eAAe,QAAQ,YAAY;AAGzC,QAAM,WAAW,YAAY,MAAM;AACjC,UAAM,YAAY,IAAI,OAAO,EAAE,SAAS,EAAE;AAE1C,QAAI,gBAAgB,CAAC,WAAW;AAC9B,UAAI,OAAO,EAAE,OAAO,MAAM;AAC1B,UAAI,eAAe;AACjB,YAAI,SAAS,EAAE,QAAQ,EAAE;AAAA,MAC3B;AAAA,IACF,OAAO;AACL,UAAI,eAAe;AACjB,YAAI,SAAS,EAAE,QAAQ,MAAM;AAAA,MAC/B,OAAO;AACL,cAAM,cAAc,IAAI,SAAS,EAAE,SAAS,EAAE;AAC9C,YACG,SAAS,EACT,QAAQ,YAAY,KAAK,IAAI,GAAG,WAAW,IAAI,MAAM,KAAK,MAAM;AAAA,MACrE;AAAA,IACF;AAAA,EACF,GAAG,CAAC,KAAK,cAAc,eAAe,MAAM,CAAC;AAE7C,MAAI,SAAU,QAAO;AACrB,SAAO;AACT;AAOO,IAAM,4BAA4B;AAAA,EACvC;AAAA,EACA;AAAA,EACA,CAAC,UAAU,QAAQ,iBAAiB,YAAY,QAAQ;AAC1D;","names":[]}